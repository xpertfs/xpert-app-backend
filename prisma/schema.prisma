// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
  seed     = "ts-node prisma/seed.ts"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User & Auth models
model User {
  id              String    @id @default(uuid())
  email           String    @unique
  passwordHash    String
  firstName       String
  lastName        String
  role            UserRole
  active          Boolean   @default(true)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  company         Company?  @relation(fields: [companyId], references: [id])
  companyId       String?
}

enum UserRole {
  ADMIN
  PROJECT_MANAGER
  FOREMAN
  ACCOUNTANT
  EMPLOYEE
}

model Company {
  id             String       @id @default(uuid())
  name           String
  address        String?
  city           String?
  state          String?
  zip            String?
  phone          String?
  email          String?
  logo           String?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  users          User[]
  clients        Client[]
  projects       Project[]
  contractors    Contractor[]
  employees      Employee[]
  expenses       Expense[]
  materials      Material[]
  vendors        Vendor[]
  unionClasses   UnionClass[]
}

// General Contractor model
model Contractor {
  id          String    @id @default(uuid())
  code        String
  name        String
  address     String?
  city        String?
  state       String?
  zip         String?
  phone       String?
  email       String?
  contactName String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  company     Company   @relation(fields: [companyId], references: [id])
  companyId   String
  projects    Project[]

  @@unique([companyId, code])
}

// Client & Project models
model Client {
  id          String    @id @default(uuid())
  code        String
  name        String
  address     String?
  city        String?
  state       String?
  zip         String?
  phone       String?
  email       String?
  contactName String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  company     Company   @relation(fields: [companyId], references: [id])
  companyId   String
  projects    Project[]

  @@unique([companyId, code])
}

model Project {
  id              String            @id @default(uuid())
  name            String
  code            String
  description     String?
  address         String?
  city            String?
  state           String?
  zip             String?
  startDate       DateTime?
  endDate         DateTime?
  status          ProjectStatus     @default(PLANNING)
  value           Decimal           @default(0) @db.Decimal(10, 2)
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  client          Client            @relation(fields: [clientId], references: [id])
  clientId        String
  company         Company           @relation(fields: [companyId], references: [id])
  companyId       String
  contractor      Contractor?       @relation(fields: [contractorId], references: [id])
  contractorId    String?
  scopes          Scope[]
  projectWorkItems ProjectWorkItem[]
  expenses        Expense[]
  timeEntries     TimeEntry[]
  sheetConnection SheetConnection?

  @@unique([companyId, code])
}

enum ProjectStatus {
  PLANNING
  IN_PROGRESS
  ON_HOLD
  COMPLETED
  CANCELLED
}

// Scope & Work Item models
model Scope {
  id          String      @id @default(uuid())
  name        String
  code        String
  description String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  project     Project     @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId   String
  subScopes   SubScope[]

  @@unique([projectId, code])
}

model SubScope {
  id                String              @id @default(uuid())
  name              String
  code              String
  description       String?
  percentComplete   Decimal             @default(0) @db.Decimal(5, 2)
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  scope             Scope               @relation(fields: [scopeId], references: [id], onDelete: Cascade)
  scopeId           String
  workItemQuantities WorkItemQuantity[]

  @@unique([scopeId, code])
}

model WorkItem {
  id                String              @id @default(uuid())
  code              String
  name              String
  description       String?
  unit              String
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  projectWorkItems  ProjectWorkItem[]
  workItemQuantities WorkItemQuantity[]
}

model ProjectWorkItem {
  id          String    @id @default(uuid())
  unitPrice   Decimal   @db.Decimal(10, 2)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  project     Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId   String
  workItem    WorkItem  @relation(fields: [workItemId], references: [id])
  workItemId  String

  @@unique([projectId, workItemId])
}

model WorkItemQuantity {
  id          String    @id @default(uuid())
  quantity    Decimal   @db.Decimal(10, 2)
  completed   Decimal   @default(0) @db.Decimal(10, 2)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  subScope    SubScope  @relation(fields: [subScopeId], references: [id], onDelete: Cascade)
  subScopeId  String
  workItem    WorkItem  @relation(fields: [workItemId], references: [id])
  workItemId  String

  @@unique([subScopeId, workItemId])
}

// Labor management models
model Employee {
  id            String      @id @default(uuid())
  code          String
  firstName     String
  lastName      String
  email         String?
  phone         String?
  type          EmployeeType
  rate          Decimal?    @db.Decimal(10, 2)
  hireDate      DateTime?
  terminationDate DateTime?
  active        Boolean     @default(true)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  company       Company     @relation(fields: [companyId], references: [id])
  companyId     String
  unionClass    UnionClass? @relation(fields: [unionClassId], references: [id])
  unionClassId  String?
  timeEntries   TimeEntry[]
  payments      Payment[]

  @@unique([companyId, code])
}

enum EmployeeType {
  LOCAL
  UNION
}

model UnionClass {
  id                  String                @id @default(uuid())
  code                String
  name                String
  description         String?
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  company             Company               @relation(fields: [companyId], references: [id])
  companyId           String
  employees           Employee[]
  baseRates           UnionClassBaseRate[]
  customRates         UnionClassCustomRate[]

  @@unique([companyId, code])
}

model UnionClassBaseRate {
  id            String    @id @default(uuid())
  rate          Decimal   @db.Decimal(10, 2)
  effectiveDate DateTime
  endDate       DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  unionClass    UnionClass @relation(fields: [unionClassId], references: [id], onDelete: Cascade)
  unionClassId  String
}

model UnionClassCustomRate {
  id            String    @id @default(uuid())
  name          String
  rate          Decimal   @db.Decimal(10, 2)
  percentage    Boolean   @default(false)
  effectiveDate DateTime
  endDate       DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  unionClass    UnionClass @relation(fields: [unionClassId], references: [id], onDelete: Cascade)
  unionClassId  String
}

model TimeEntry {
  id             String          @id @default(uuid())
  date           DateTime
  regularHours   Decimal         @default(0) @db.Decimal(5, 2)
  overtimeHours  Decimal         @default(0) @db.Decimal(5, 2)
  doubleHours    Decimal         @default(0) @db.Decimal(5, 2)
  notes          String?
  paymentStatus  PaymentStatus   @default(PENDING)
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  employee       Employee        @relation(fields: [employeeId], references: [id])
  employeeId     String
  project        Project?        @relation(fields: [projectId], references: [id])
  projectId      String?
  payment        Payment?        @relation(fields: [paymentId], references: [id])
  paymentId      String?
}

enum PaymentStatus {
  PENDING
  APPROVED
  PAID
  CANCELLED
}

model Payment {
  id               String      @id @default(uuid())
  paymentDate      DateTime
  regularAmount    Decimal     @db.Decimal(10, 2)
  overtimeAmount   Decimal     @db.Decimal(10, 2)
  doubleAmount     Decimal     @db.Decimal(10, 2)
  deductions       Decimal     @default(0) @db.Decimal(10, 2)
  totalAmount      Decimal     @db.Decimal(10, 2)
  status           PaymentStatus @default(PENDING)
  reference        String?
  notes            String?
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @updatedAt
  employee         Employee    @relation(fields: [employeeId], references: [id])
  employeeId       String
  timeEntries      TimeEntry[]
}

// Expense & Material models
model Expense {
  id          String        @id @default(uuid())
  date        DateTime
  amount      Decimal       @db.Decimal(10, 2)
  description String
  category    ExpenseCategory
  reference   String?
  recurring   Boolean       @default(false)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  company     Company       @relation(fields: [companyId], references: [id])
  companyId   String
  project     Project?      @relation(fields: [projectId], references: [id])
  projectId   String?
  vendor      Vendor?       @relation(fields: [vendorId], references: [id])
  vendorId    String?
}

enum ExpenseCategory {
  MATERIAL
  TOOL
  RENTAL
  OPERATIONAL
  LABOR
  OTHER
}

model Material {
  id           String        @id @default(uuid())
  code         String
  name         String
  description  String?
  unit         String
  category     String?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  company      Company       @relation(fields: [companyId], references: [id])
  companyId    String
  vendorPrices VendorPrice[]

  @@unique([companyId, code])
}

model Vendor {
  id           String        @id @default(uuid())
  code         String
  name         String
  address      String?
  city         String?
  state        String?
  zip          String?
  phone        String?
  email        String?
  contactName  String?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  company      Company       @relation(fields: [companyId], references: [id])
  companyId    String
  vendorPrices VendorPrice[]
  expenses     Expense[]

  @@unique([companyId, code])
}

model VendorPrice {
  id           String    @id @default(uuid())
  price        Decimal   @db.Decimal(10, 2)
  effectiveDate DateTime
  endDate      DateTime?
  notes        String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  material     Material  @relation(fields: [materialId], references: [id], onDelete: Cascade)
  materialId   String
  vendor       Vendor    @relation(fields: [vendorId], references: [id], onDelete: Cascade)
  vendorId     String
}

// Google Sheet Integration models
model SheetConnection {
  id           String     @id @default(uuid())
  sheetId      String
  sheetName    String?
  lastSyncDate DateTime?
  active       Boolean    @default(true)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  project      Project    @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId    String     @unique
  syncLogs     SyncLog[]
}

model SyncLog {
  id                String    @id @default(uuid())
  syncDate          DateTime  @default(now())
  status            SyncStatus
  recordsProcessed  Int       @default(0)
  recordsSuccessful Int       @default(0)
  recordsFailed     Int       @default(0)
  errorMessage      String?
  createdAt         DateTime  @default(now())
  sheetConnection   SheetConnection @relation(fields: [sheetConnectionId], references: [id], onDelete: Cascade)
  sheetConnectionId String
}

enum SyncStatus {
  SUCCESS
  PARTIAL
  FAILED
}